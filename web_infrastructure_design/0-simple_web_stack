

   +-----------------------------------------------------------+
   |                        User                               |
   +-----------------------------------------------------------+
                   |
                   | HTTP Request
                   |
   +-----------------------------------------------------------+
   |                      Internet                             |
   +-----------------------------------------------------------+
                   |
                   | DNS Resolution
                   |
   +-----------------------------------------------------------+
   |                       DNS Servers                         |
   |                                                           |
   |   +-----------------------+                               |
   |   |   foobar.com          |                               |
   |   |   (Authoritative)     |                               |
   |   |                       |                               |
   |   |   www.foobar.com      |                               |
   |   |   (A Record: IP)      |                               |
   |   +-----------------------+                               |
   +-----------------------------------------------------------+
                   |
                   | HTTP Request
                   |
   +-----------------------------------------------------------+
   |                    Load Balancer                          |
   | (HAproxy with Round Robin distribution algorithm)         |
   |   +-----------------------+          +----------------+   |
   |   |      Web Server 1     |          | Application    |   |
   |   |       (Nginx)         |          | Server 1       |   |
   |   |                       |          |                |   |
   |   +-----------------------+          +----------------+   |
   |   +-----------------------+          +----------------+   |
   |   |      Web Server 2     |          | Application    |   |
   |   |       (Nginx)         |          | Server 2       |   |
   |   |                       |          |                |   |
   |   +-----------------------+          +----------------+   |
   +-----------------------------------------------------------+
                   |
                   | HTTP Request (distributed by Load Balancer)
                   |
   +-----------------------------------------------------------+
   |                  Application Servers                      |
   |     (Runs the application code and interacts with         |
   |                the database)                              |
   |   +-----------------------+          +----------------+   |
   |   |       Application     |          |    Database    |   |
   |   |       Server 1        |          |    (MySQL)     |   |
   |   |                       |          |    Primary     |   |
   |   +-----------------------+          +----------------+   |
   |   +-----------------------+          +----------------+   |
   |   |       Application     |          |    Database    |   |
   |   |       Server 2        |          |    (MySQL)     |   |
   |   |                       |          |    Replica     |   |
   |   +-----------------------+          +----------------+   |
   +-----------------------------------------------------------+



Explanation of the additional elements:

- I added two load balancers (HAproxy) to distribute the incoming traffic to the web servers (Nginx). This improves the performance and availability of the website by balancing the load and avoiding overloading a single server. HAproxy is a popular open source load balancer that supports various protocols and algorithms1.
- I added two web servers (Nginx) to serve the static and dynamic content of the website. Nginx is a high-performance web server that can also act as a reverse proxy, cache, and load balancer2. Having two web servers increases the redundancy and fault tolerance of the system.
- I added two application servers to run the business logic and interact with the database. The application server can be any platform or framework that supports the development of web applications, such as Node.js, Ruby on Rails, Django, etc. Having two application servers also increases the redundancy and fault tolerance of the system.
- I added two databases (MySQL) to store and retrieve the data for the website. MySQL is a widely used open source relational database management system that supports various data types and queries3. Having two databases allows for a primary-replica (master-slave) cluster, which improves the scalability and reliability of the system.


What distribution algorithm the load balancer is configured with and how it works:

One possible distribution algorithm that the load balancer can use is round robin, which assigns each incoming request to the next available server in a circular order. This is a simple and fair algorithm that ensures equal distribution of load among the servers4.


Is the load-balancer enabling an Active-Active or Active-Passive setup, explain the difference between both:

In this infrastructure, the load balancer is enabling an active-active setup, which means that both load balancers are active and can receive and process requests. This increases the availability and performance of the system, as there is no single point of failure and the load is shared between the load balancers. The load balancers can also monitor each other and take over the traffic if one of them fails.
In contrast, an active-passive setup means that only one load balancer is active and the other one is passive, which means that it only acts as a backup in case the active one fails. This provides high availability, but not high performance, as the passive load balancer is idle and does not share the load.


How a database Primary-Replica (Master-Slave) cluster works:

A database primary-replica (master-slave) cluster works by having one database (the primary or master) that handles all the write operations, and one or more databases (the replicas or slaves) that handle all the read operations. The primary database replicates its data to the replica databases, so that they have the same data. This improves the scalability and reliability of the system, as the read load is distributed among the replicas and the data is backed up in case the primary fails.

What is the difference between the Primary node and the Replica node in regard to the application:

The difference between the primary node and the replica node in regard to the application is that the primary node is responsible for writing the data to the database, while the replica node is responsible for reading the data from the database. The application server needs to communicate with the primary node when it needs to insert, update, or delete data, and with the replica node when it needs to query or fetch data. The application server also needs to handle the case when the primary node fails and switch to another node as the new primary.


Explain what the issues are with this infrastructure:

- Where are SPOF:

- A single point of failure (SPOF) is a component of the system that, if it fails, will cause the whole system to fail. In this infrastructure, there are some potential SPOFs, such as:
- The network connection between the load balancers and the web servers, or between the web servers and the application servers, or between the application servers and the databases. If any of these connections fail, the communication between the components will be disrupted and the system will not function properly.
- The primary database node. If the primary database node fails, the system will not be able to write data to the database, and the application server will have to switch to another node as the new primary. This can cause data loss, inconsistency, or downtime.

- Security issues (no firewall, no HTTPS):

- No firewall. A firewall is a device or software that controls the incoming and outgoing network traffic based on predefined rules. A firewall can help protect the system from unauthorized access, malicious attacks, or unwanted traffic. Without a firewall, the system is exposed to various security threats and vulnerabilities.
- No HTTPS. HTTPS is a protocol that encrypts the communication between the client and the server using SSL/TLS certificates. HTTPS can help protect the data from being intercepted, modified, or stolen by third parties. Without HTTPS, the data is transmitted in plain text and can be easily compromised.

- No monitoring:
- Monitoring is the process of collecting, analyzing, and reporting the performance, availability, and health of the system. Monitoring can help identify and troubleshoot issues, optimize resources, and improve user experience. Without monitoring, the system may suffer from undetected errors, inefficiencies, or failures.